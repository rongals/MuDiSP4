//
// MuDiSP3 (Multirate Digital Signal Processor 3)
// Copyright 1999, Luca Simone Ronga
//
//
//  This file is part of MuDiSP3.
//
//  MuDiSP3 is free software; you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation; either version 2 of the License, or
//  (at your option) any later version.
//
//  MuDiSP3 is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.
//
//  You should have received a copy of the GNU General Public License
//  along with MuDiSP3; if not, write to the Free Software
//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
//
/////////////////////////////////////////////////////////



#include <iostream>
#include <fstream>
#include <string>
#include <stdio.h> 
#include <stdlib.h>

using namespace std;

void explode(string base, char *args[], int index ) {
  
  unsigned int filecount = 0;
  ifstream opt_ifs(args[index]);
  
  
  if (! opt_ifs ) {
    cerr << "Error opening " << args[index] << ". Aborting." << endl;
    exit(1);
  }
  
  string str,bstr;
  size_t ptr;
  
  while( getline(opt_ifs,str) ) {
    
    // a line fetched
    
    if (((ptr=str.find(":")) != str.npos) && (str[0] != ';')) {
      
      // perhaps a valid line 
      
      char tmp[128];
      string ofn(base.c_str()), stmp;
      size_t dotpos;
      
      dotpos = ofn.find_last_of('.');
      
      sprintf(tmp,"%03d",filecount++);
      
      stmp = string("_") + string(tmp);
      
      ofn.insert(dotpos,stmp);
      
      cout << "Producing : " << ofn.c_str() << endl;
      
      ofstream ofs(ofn.c_str());
      ifstream base_ifs(base.c_str());       
      
      if (! base_ifs ) {
	cerr << "Error opening " << base.c_str() << ". Aborting." << endl;
	exit(1);
      }

      ofs << ";\n; Generated by param_exploder\n;\n";
      ofs << str.c_str() << endl;
      
      while( getline(base_ifs,bstr) ) {
	ofs << bstr.c_str() << endl;
      }
      ofs.close();
      base_ifs.close();

      //
      // recusive invocation
      //

      if (index > 2) {

	explode(ofn,args,index-1);

	string tmp;
	tmp = string("rm -f ") + ofn;
	system(tmp.c_str());
	cout << "Removing : " << ofn.c_str() << endl;

      }
    }
  }
  opt_ifs.close();
}

int main(int argc, char* argv[]) {

  
  if (argc < 3) {
    cerr << "Usage: "
	 << endl << argv[0] << " <base param file> "
	 << " <options file> [<options file> ...]"
	 << endl;
    exit(0);
  }
  
  string base(argv[1]);

  explode( base, argv, argc-1 );

}

